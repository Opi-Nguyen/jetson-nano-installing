import os
import json
import time
import requests
import threading
import netifaces

DEVICE_INFO_PATH = "/home/.device_info"
DOMAIN_REMOTE = "hec08rwqwte.sn.mynetname.net"
DOMAIN_LAN = "192.168.88.100"
PORT = "8040"

INIT_DEVICE_API = "/api/v1/init-device-id"
UPDATE_STATUS_API = "/api/v1/update-device-status"

def get_local_ip(interface="eth0"):  # Ho·∫∑c "wlan0" n·∫øu d√πng Wi-Fi
    try:
        return netifaces.ifaddresses(interface)[netifaces.AF_INET][0]['addr']
    except KeyError:
        return None

def get_public_ip():
    try:
        return requests.get("https://api64.ipify.org?format=json", timeout=5).json().get("ip")
    except:
        return None

def get_ip_addresses():
    """L·∫•y ƒë·ªãa ch·ªâ IP c√¥ng khai v√† IP c·ª•c b·ªô, retry n·∫øu ch∆∞a c√≥ m·∫°ng"""
    while True:
        public_ip = get_public_ip()
        local_ip = get_local_ip()
        
        if public_ip or local_ip:
            return public_ip or "Unknown", local_ip or "Unknown"
        
        print("‚ö†Ô∏è M·∫°ng ch∆∞a s·∫µn s√†ng, ƒë·ª£i 5 gi√¢y...")
        time.sleep(5)

def continuously_update_ip():
    """C·∫≠p nh·∫≠t IP v√†o file ~/.device_info m·ªói 5 gi√¢y"""
    while True:
        public_ip, local_ip = get_ip_addresses()
        device_info = load_device_info()
        
        if device_info.get("public_ip") != public_ip or device_info.get("local_ip") != local_ip:
            device_info.update({"public_ip": public_ip, "local_ip": local_ip})
            save_device_info(device_info)
            print(f"üîÑ C·∫≠p nh·∫≠t IP: Public: {public_ip}, Local: {local_ip}")

        time.sleep(5)

def check_server_access(domain):
    """Ki·ªÉm tra xem server c√≥ th·ªÉ truy c·∫≠p ƒë∆∞·ª£c kh√¥ng"""
    url = f"http://{domain}:{PORT}{INIT_DEVICE_API}"
    try:
        response = requests.post(url, json={"public_ip": "test", "local_ip": "test"}, timeout=3)
        return response.status_code == 200
    except requests.exceptions.RequestException:
        return False

def select_server():
    """Ch·ªçn server ph√π h·ª£p d·ª±a v√†o m√¥i tr∆∞·ªùng m·∫°ng"""
    if check_server_access(DOMAIN_REMOTE):
        return f"http://{DOMAIN_REMOTE}"
    if check_server_access(DOMAIN_LAN):
        return f"http://{DOMAIN_LAN}"
    return None

def load_device_info():
    """ƒê·ªçc file ~/.device_info n·∫øu t·ªìn t·∫°i"""
    if os.path.exists(DEVICE_INFO_PATH):
        with open(DEVICE_INFO_PATH, "r") as f:
            return json.load(f)
    return {}

def save_device_info(data):
    """L∆∞u th√¥ng tin v√†o file ~/.device_info"""
    with open(DEVICE_INFO_PATH, "w") as f:
        json.dump(data, f, indent=4)

def init_device_id():
    """G·ª≠i request ƒë·ªÉ l·∫•y device_id n·∫øu ch∆∞a c√≥, ch·∫°y m·ªôt l·∫ßn duy nh·∫•t"""
    device_info = load_device_info()

    if device_info.get("device_id"):
        print(f"‚úÖ Device ID ƒë√£ t·ªìn t·∫°i: {device_info['device_id']}")
        return  # ƒê√£ c√≥ device_id, kh√¥ng c·∫ßn l√†m g√¨ n·ªØa

    public_ip, local_ip = get_ip_addresses()
    device_info.update({"public_ip": public_ip, "local_ip": local_ip})
    save_device_info(device_info)

    while not device_info.get("device_id"):
        server = select_server()
        if not server:
            print("‚ùå Kh√¥ng t√¨m th·∫•y server ph√π h·ª£p, th·ª≠ l·∫°i sau 10 gi√¢y...")
            time.sleep(10)
            continue

        url = f"{server}:{PORT}{INIT_DEVICE_API}"
        try:
            response = requests.post(url, json={"public_ip": public_ip, "local_ip": local_ip}, timeout=5)
            if response.status_code == 200:
                device_id = response.json().get("device_id")
                if device_id:
                    device_info["device_id"] = device_id
                    save_device_info(device_info)
                    print(f"‚úÖ Device ID assigned: {device_id}")
                    return  # D·ª´ng ngay khi c√≥ device_id
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi l·∫•y device_id: {e}")

        time.sleep(10)

def update_device_status():
    """C·∫≠p nh·∫≠t tr·∫°ng th√°i thi·∫øt b·ªã l√™n server m·ªói 5 gi√¢y"""
    while True:
        device_info = load_device_info()
        if not device_info.get("device_id"):
            print("‚ö†Ô∏è Kh√¥ng c√≥ device_id, b·ªè qua c·∫≠p nh·∫≠t tr·∫°ng th√°i...")
            time.sleep(10)
            continue

        server = select_server()
        if not server:
            print("‚ùå Kh√¥ng t√¨m th·∫•y server, b·ªè qua c·∫≠p nh·∫≠t tr·∫°ng th√°i...")
            time.sleep(10)
            continue

        url = f"{server}:{PORT}{UPDATE_STATUS_API}"

        try:
            payload = {
                "device_id": device_info["device_id"],
                "public_ip": device_info["public_ip"],
                "local_ip": device_info["local_ip"]
            }
            response = requests.post(url, json=payload, timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i: {device_info['device_id']}")
            else:
                print(f"‚ö†Ô∏è Server tr·∫£ v·ªÅ m√£ l·ªói {response.status_code}")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i: {e}")

        time.sleep(5)

if __name__ == "__main__":
    if os.geteuid() != 0:
        print("‚ùå This script must be run as root.")
        exit(1)
    
    if not os.path.exists(DEVICE_INFO_PATH):
        public_ip, local_ip = get_ip_addresses()
        save_device_info({"public_ip": public_ip, "local_ip": local_ip, "device_id": None})
    
    # Ch·∫°y c·∫≠p nh·∫≠t IP li√™n t·ª•c trong n·ªÅn
    ip_update_thread = threading.Thread(target=continuously_update_ip, daemon=True)
    ip_update_thread.start()

    # Kh·ªüi t·∫°o device_id (ch·∫°y m·ªôt l·∫ßn r·ªìi k·∫øt th√∫c)
    init_device_id()

    # Ch·∫°y c·∫≠p nh·∫≠t tr·∫°ng th√°i thi·∫øt b·ªã li√™n t·ª•c
    update_device_status()
